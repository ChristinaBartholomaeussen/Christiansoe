@page "/coordinate-route"
@using christiansoe.Data.services
@using christiansoe.Data.models
@using GeoCoordinatePortable
@using Newtonsoft.Json
@inject IAttractionService _attractionService;
@inject IJSRuntime _jsRuntime;





<div class="row">
    <div class="col-4">

        <div style="text-align: center; margin: 20px">
            
        
            <p>Vælg de attaktioner fra listen, du ønsker at se.</p>
            <p>Turen starter altid fra færgeterminalen</p>
        
            <div style="text-align: center">
                @if (Attractions == null)
                {
            
                    <div class="spinner-border m-5" role="status"></div> 
            
            
                }
                else
                {
                    <EditForm Model="@_route" OnValidSubmit="@OnSubmit">
                        @foreach (var attraction in Attractions.Skip(1))
                        {
                            <div class="attractionList-checklist">
                                <input class="form-check-input me-1" type="checkbox" disabled="@CheckboxesIsDisabled"
                                       id="@attraction.Id" @onchange="(ev) => AddAttractionToRoute(attraction, ev)"/>
                                <label for="@attraction.Id">@attraction.Name</label>
                            </div>
                        }
                        
                        <button type="submit" class="btn-class" disabled="@CheckboxesIsDisabled">Find rute</button>
                        <button @onclick="ResetRoute" class="btn-class">Nulstil</button>
                        <br>
                        <label for="durationId">Estimeret (minutter): </label>
                        <input disabled="disabled" @bind-value="_route.Duration" style="width: fit-content" id="durationId"/>
                        
                    </EditForm>
                }


            </div>
            
            
            
        </div>
    </div>
    
    <div class="col-8" style="text-align: center">
        <div @ref=_map id="mapId">
            
        </div>
        <button type="button" class="btn-class" @onclick="DownloadRoute" disabled="@DownloadButtonIsDisabled">Download rute</button>
    </div>
    
    

</div>






@code {
     ElementReference _map;
    
    
    private void DownloadRoute()
    {
        _jsRuntime.InvokeVoidAsync("fullscreen");

    }


   
    
    
    private List<Attraction> Attractions { get; set; }
    private bool CheckboxesIsDisabled { get; set; }
    private Route _route = new ();
    
    private bool DownloadButtonIsDisabled { get; set; } = true;

    
    

    private void ResetRoute()
    {
        _jsRuntime.InvokeVoidAsync("resetRoute.ResetRoute");
        CheckboxesIsDisabled = false;
        DownloadButtonIsDisabled = true;
        _route = new Route();
    }
    
    
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadAttractions);
        await base.OnInitializedAsync();
    }
    

    private async Task LoadAttractions()
    {
        Attractions = await _attractionService.GetAttractions();
    }
    
    private void AddAttractionToRoute(Attraction attraction, ChangeEventArgs ev)
    {

        if (ev.Value == null) return;
        switch (ev.Value.ToString())
        {
            case "True":
                _route.Attractions.Add(attraction);
                _jsRuntime.InvokeVoidAsync("addMarker.AddMarker", attraction.Latitude, attraction.Longitude);
                break;
            case "False" when _route.Attractions.Contains(attraction):
                _route.Attractions.Remove(attraction);
                _jsRuntime.InvokeVoidAsync("removeMarker.RemoveMarker", attraction.Latitude, attraction.Longitude);
                break;
        }
        
    }

    private async Task<List<GeoCoordinate>> SortCoordinates()
    {
        return await _attractionService.SortCoordinates(_route.Attractions);
    }

    
    
    private async Task OnSubmit()
    {
        var geoCoordinates = await SortCoordinates();
        if (geoCoordinates.Count != 0)
        {
            var geoCoordinatesConverted = JsonConvert.SerializeObject(geoCoordinates);
            var time = await _jsRuntime.InvokeAsync<double>("createRoute.CallByC", geoCoordinatesConverted);
            var timeToConvert = TimeSpan.FromSeconds(time);
            _route.Duration = timeToConvert.ToString(@"mm\:ss");
            CheckboxesIsDisabled = true;
            DownloadButtonIsDisabled = false;
        }
        
    }

    protected override async Task <Task> OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _jsRuntime.InvokeVoidAsync("createMap.GenerateMap", _map);
        }
        return base.OnAfterRenderAsync(firstRender);
    }

}

